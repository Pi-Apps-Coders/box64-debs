name: Update-box64

# Controls when the workflow will run
on:
  schedule:
     - cron: '0 1 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update-box64:
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04-arm

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Import GPG key
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      
      # Clear all existing .deb files to start fresh for new releases
      - name: Clear old releases
        run: |
          rm -f $GITHUB_WORKSPACE/debian/*.deb
      
      # Install dependencies, clone box64, build, and create .debs (inlined from removed scripts)
      - name: Install dependencies and build in Docker
        uses: docker://arm64v8/ubuntu:18.04
        with:
          entrypoint: "/bin/bash"
          args: |
            set -e
            # Install build dependencies
            apt-get update
            apt-get install -y gcc-8 cmake git checkinstall binutils build-essential
            # Configure git
            git config --global --add safe.directory /github/workspace
            # Clone box64 and get latest commit
            cd /github/workspace
            git clone https://github.com/ptitSeb/box64.git box64-src
            cd box64-src
            LATEST_COMMIT=$(git rev-parse --short HEAD)
            # Build for multiple targets (inline from create-deb.sh)
            TARGETS=("GENERIC_ARM" "ANDROID" "RPI4ARM64")
            for TARGET in "${TARGETS[@]}"; do
              mkdir -p build_$TARGET
              cd build_$TARGET
              cmake .. -D${TARGET}=1 -DCMAKE_BUILD_TYPE=RelWithDebInfo
              make -j$(nproc)
              # Create .deb with checkinstall
              TIMESTAMP=$(date +%Y%m%dT%H%M%S)
              VERSION="0.3.7+${TIMESTAMP}.${LATEST_COMMIT}"
              checkinstall -D --pkgname=box64-${TARGET,,} --pkgversion=$VERSION --pkgarch=arm64 --maintainer="Pi-Apps-Coders" --provides=box64 --conflicts=box64 make install
              mv *.deb /github/workspace/debian/
              cd ..
            done
            # Cleanup: Keep only last 4 .debs per target
            for TARGET in "${TARGETS[@]}"; do
              ls -t /github/workspace/debian/box64-${TARGET,,}*.deb | tail -n +5 | xargs rm -f || true
            done
            # Mark success (to avoid commit if no changes, but since we cleared, always commit)
            touch /github/workspace/exited_successfully.txt

      # Update Debian Repository (rebuild metadata)
      - name: Update Debian Repository
        run: |
          # List GPG keys
          gpg -K
          # Rebuild debian repo
          cd $GITHUB_WORKSPACE/debian
          rm -f $GITHUB_WORKSPACE/debian/Packages $GITHUB_WORKSPACE/debian/Packages.gz $GITHUB_WORKSPACE/debian/Release $GITHUB_WORKSPACE/debian/Release.gpg $GITHUB_WORKSPACE/debian/InRelease
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          apt-ftparchive release . > Release
          gpg --default-key "atoll6@users.noreply.github.com" --batch --pinentry-mode="loopback" --passphrase="${{ secrets.PASSPHRASE }}" -abs -o - Release > Release.gpg || echo "Failed to sign Release.gpg"
          gpg --default-key "atoll6@users.noreply.github.com" --batch --pinentry-mode="loopback" --passphrase="${{ secrets.PASSPHRASE }}" --clearsign -o - Release > InRelease || echo "Failed to sign InRelease"

      # Upload (commit and push changes)
      - name: Upload
        run: |
          if [[ -f exited_successfully.txt ]]; then
            rm exited_successfully.txt
            exit 0
          fi
          cd $GITHUB_WORKSPACE
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          bash -c "git add . && git commit -m 'Update box64 to latest commit'" || true
          git push