name: Update-box64

# Controls when the workflow will run
on:
  push:
    branches: [master]
  schedule:
     - cron: '0 1 * * *'
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update-box64:
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04-arm

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - uses: actions/checkout@v4

      # Import GPG key
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      
      # Clear all existing .deb files to start fresh for new releases
      - name: Clear old releases
        run: |
          rm -f $GITHUB_WORKSPACE/debian/*.deb
      
      # Install dependencies and build latest release
      - name: Install dependencies and build
        run: |
          set -e
          # Install build dependencies
          sudo apt-get update
          sudo apt-get install -y cmake git checkinstall binutils build-essential curl jq python3
          # Configure git
          git config --global --add safe.directory $GITHUB_WORKSPACE
          # Get latest release tag from upstream
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/ptitSeb/box64/releases/latest | jq -r '.tag_name')
          if [ -z "$LATEST_RELEASE" ]; then
            echo "No release found, exiting"
            exit 1
          fi
          # Check if release is new
          RELEASE_FILE="$GITHUB_WORKSPACE/last_release.txt"
          if [ -f "$RELEASE_FILE" ] && [ "$(cat $RELEASE_FILE)" == "$LATEST_RELEASE" ]; then
            echo "No new release, skipping build"
            touch $GITHUB_WORKSPACE/exited_successfully.txt
            exit 0
          fi
          echo "$LATEST_RELEASE" > $RELEASE_FILE
          # Clone box64 at the release tag
          cd $GITHUB_WORKSPACE
          git clone --branch $LATEST_RELEASE --depth 1 https://github.com/ptitSeb/box64.git box64-src
          cd box64-src
          # Build for one target (RPI5ARM64)
          TARGET="RPI5ARM64"
          mkdir -p build_$TARGET
          cd build_$TARGET
          cmake .. -D${TARGET}=1 -DARM_DYNAREC=ON -DBOX32=ON -DBOX32_BINFMT=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo
          make -j$(nproc)
          # Create .deb with checkinstall
          VERSION="${LATEST_RELEASE}"
          sudo checkinstall -D --pkgname=box64-${TARGET,,} --pkgversion=$VERSION --pkgarch=arm64 --maintainer="atoll6" --provides=box64 --conflicts=box64 make install
          mv *.deb $GITHUB_WORKSPACE/debian/
          # Mark success
          touch $GITHUB_WORKSPACE/exited_successfully.txt

      # Update Debian Repository (rebuild metadata)
      - name: Update Debian Repository
        run: |
          cd $GITHUB_WORKSPACE/debian
          rm -f Packages Packages.gz Release Release.gpg InRelease
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          apt-ftparchive release . > Release
          gpg --default-key "atoll6@users.noreply.github.com" --batch --pinentry-mode="loopback" --passphrase="${{ secrets.PASSPHRASE }}" -abs -o - Release > Release.gpg || echo "Failed to sign Release.gpg"
          gpg --default-key "atoll6@users.noreply.github.com" --batch --pinentry-mode="loopback" --passphrase="${{ secrets.PASSPHRASE }}" --clearsign -o - Release > InRelease || echo "Failed to sign InRelease"

      # Upload (commit and push changes)
      - name: Upload
        run: |
          cd $GITHUB_WORKSPACE
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Update box64 to latest release" || true
          git push